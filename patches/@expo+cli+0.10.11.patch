async function resolvePortsAsync(projectRoot, options, settings) {
    const multiBundlerSettings = {};

    const webDefaultPort = process.env.WEB_PORT ? parseInt(process.env.WEB_PORT, 10) : undefined;
    const webpackPort = await (0, _port).resolvePortAsync(projectRoot, {
        defaultPort: webDefaultPort || options.port,
        fallbackPort: 19006
    });
    if (!webpackPort) {
        throw new _errors.AbortCommandError();
    }
    multiBundlerSettings.webpackPort = webpackPort;

    const metroDefaultPort = process.env.METRO_PORT ? parseInt(process.env.METRO_PORT, 10) : undefined;
    const devClientFallbackPort = process.env.RCT_METRO_PORT ? parseInt(process.env.RCT_METRO_PORT, 10) : 8081;
    const metroPort = await (0, _port).resolvePortAsync(projectRoot, {
        defaultPort: metroDefaultPort || options.port,
        fallbackPort: options.devClient ? devClientFallbackPort : 19000
    });
    if (!metroPort) {
        throw new _errors.AbortCommandError();
    }
    multiBundlerSettings.metroPort = metroPort;

    return multiBundlerSettings;
}

// In the utils/port.js file
async function resolvePortAsync(projectRoot, { defaultPort, fallbackPort }) {
    let port;
    if (typeof defaultPort === "number") {
        port = defaultPort;
    } else {
        port = fallbackPort || 8081;
    }

    const resolvedPort = await choosePortAsync(projectRoot, {
        port
    });

    return resolvedPort;
}
